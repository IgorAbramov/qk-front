// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedIndexes"]
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
    SUPER_ADMIN
    ADMIN
    INSTITUTION_REPRESENTATIVE
    STUDENT
}

model User {
    uuid            String @id @default(uuid())
    email           String @unique
    password        String @default(cuid())
    role            Role
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    lastLoginAt     DateTime?
    firstName       String?
    lastName        String?
    credentials     Credential[]
    institution     Institution? @relation(fields: [institutionUuid], references: [uuid])
    institutionUuid String?

    @@map("users")
}

enum CredentialStatus {
    NEW
    UPLOADING_TO_BLOCKCHAIN
    FAILED_UPLOADING_TO_BLOCKCHAIN
    UPLOADED_TO_BLOCKCHAIN
    ACTIVATED
    WITHDRAWN
    EXPIRED
}

model Credential {
    uuid                String @id @default(uuid())
    did                 String @unique
    status              CredentialStatus @default(NEW)
    student             User @relation(fields: [studentUuid], references: [uuid])
    studentUuid         String
    institution         Institution @relation(fields: [institutionUuid], references: [uuid])
    institutionUuid     String
    upload              Upload @relation(fields: [uploadUuid], references: [uuid])
    uploadUuid          String

    certificateId       String?
    graduatedName       String?
    authenticatedBy     String? //User uuid
    qualificationName   String?
    majors              String?
    minors              String?
    authenticatedTitle  String?
    awardingInstitution String?
    qualificationLevel  String?
    awardLevel          String?
    studyLanguage       String?
    info                String?
    gpaFinalGrade       String?

    authenticatedAt     DateTime?
    studyStartedAt      DateTime?
    studyEndedAt        DateTime?
    graduatedAt         DateTime?
    expiresAt           DateTime?

    credentialChanges   CredentialChange[]

        createdAt       DateTime @default(now())
        updatedAt       DateTime @updatedAt

    @@map("credentials")
}

enum InsitutionStatus {
    ACTIVE
    CLOSED
}

model Institution {
    uuid            String @id @default(uuid())
    status          InsitutionStatus @default(ACTIVE)
    emailDomain     String @unique
    logoUrl         String?
    name            String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    credentials     Credential[]
    representatives User[]

    @@map("institutions")
}

enum UploadStatus {
    PENDING
    APPROVED
    REJECTED
}

model Upload {
    uuid                        String @id @default(uuid())
    filename                    String
    originalFilename            String
    mapping                     String // array with mapping of the fields
    status                      UploadStatus @default(PENDING)
    uploadedBy                  String // User uuid
    confirmationsRequestedFrom  String // array with user_uuids
    confirmedBy                 String? // array with user_uuids
    createdAt                   DateTime @default(now())
    updatedAt                   DateTime @updatedAt
    credentials                 Credential[]

    @@map("uploads")
}

model CredentialShare {
    uuid                        String @id @default(uuid())
    recipientEmail              String
    viewsCount                  Int @default(0)
    credentialUuid              String
    temporaryPassword           String
    expiresAt                   DateTime
    createdAt                   DateTime @default(now())

    @@map("credentialShares")
}

model CredentialChange {
    id                          Int @id @default(autoincrement())
    credential                  Credential @relation(fields: [credentialUuid], references: [uuid])
    credentialUuid              String
    credentialDid               String
    changedByUuid               String? // User uuid
    changedFrom                 String? // array with changes from   1;Peter;Dinklage
    changedTo                   String? // array with changes to     2;fyodor;Pupkin
    fieldName                   String? // array with field names    id;first_name;last_name
    changedAt                   DateTime @default(now())
    hash                        String @unique
    smartContractId             String?

    @@map("credentialChanges")
}

enum CredentialChangeRequestStatus {
    PENDING
    APPROVED
    REJECTED
}

model CredentialChangeRequest {
    uuid                        String @id @default(uuid())
    status                      CredentialChangeRequestStatus @default(PENDING)
    requestedBy                 String // User uuid
    confirmedBy                 String // User uuid
    changedFrom                 String // array with changes from   1;Peter;Dinklage
    changedTo                   String // array with changes to     2;fyodor;Pupkin
    fieldName                   String // array with field names    id;first_name;last_name
    createdAt                   DateTime @default(now())
    updatedAt                   DateTime @updatedAt

    @@map("credentialChangeRequests")
}


enum TransactionStatus {
    NEW
    PENDING
    CONFIRMED
    FAILED
}

model Transaction {
    uuid                        String @id @default(uuid())
    status                      TransactionStatus @default(NEW)
    credentialUuid              String
    fee                         String?
    hash                        String?
    hex                         String?
    smartContract               SmartContract? @relation(fields: [smartContractId], references: [id])
    smartContractId             String?

    createdAt                   DateTime @default(now())
    confirmedAt                 DateTime?

    @@map("transactions")
}

enum UserActionType {
    REVIEW_UPLOAD
    REVIEW_WITHDRAWAL
    REVIEW_CHANGE_REQUEST
}

model UserActions {
    id              Int     @id @default(autoincrement())
    userUuid        String
    type            UserActionType
    subjectUuid     String

    @@map("userActions")
}

model CredentialsWithdrawalRequest {
    uuid                        String @id @default(uuid())
    credentialsUuid             String @unique
    initiatedBy                 String // User uuid
    confirmationsRequestedFrom  String // array with user_uuids
    confirmedBy                 String? // array with user_uuids
    createdAt                   DateTime @default(now())
    updatedAt                   DateTime @updatedAt

    @@map("credentialsWithdrawalRequests")
}

model OneTimePassword {
    uuid            String @id @default(uuid())
    code            String
    validUntil      DateTime
    canBeResentAt   DateTime

    @@map("oneTimePasswords")
}

enum SmartContractStatus {
    ACTIVE
    STORAGE_EXCEEDED
}

model SmartContract {
    id              String @unique
    status          SmartContractStatus @default(ACTIVE)
    deployedAt      DateTime @default(now())
    transactions    Transaction[]

    @@map("smartContracts")
}
